use rusqlite::{Connection, Result};

//chipdataテーブルを作成する
pub fn create_chipdata_table(conn:&Connection)->Result<usize,rusqlite::Error>{
    conn.execute(
        "CREATE TABLE chipdata (
        ID	INTEGER PRIMARY KEY AUTOINCREMENT,
        MACHINE_NAME	VARCHAR,
        TYPE_NAME	VARCHAR,
        LOT_NAME	VARCHAR,
        SERIAL	VARCHAR,
        LD_TRAY_TIME	VARCHAR,
        LD_TRAY_PF	VARCHAR,
        LD_TRAY_POS	VARCHAR,
        LD_TRAY_POCKET_X	VARCHAR,
        LD_TRAY_POCKET_Y	VARCHAR,
        LD_TRAY_ALIGN_X	VARCHAR,
        LD_TRAY_ALIGN_Y	VARCHAR,
        LD_ARM1_TIME	VARCHAR,
        LD_ARM1_PF	VARCHAR,
        LD_ARM1_COLLET_COUNT	VARCHAR,
        LD_ALARM	VARCHAR,
        DC1_PRE_TIME	VARCHAR,
        DC1_PRE_PF	VARCHAR,
        DC1_PRE_ALIGN_X	VARCHAR,
        DC1_PRE_ALIGN_Y	VARCHAR,
        DC1_PRE_ALIGN_T	VARCHAR,
        DC1_ARM1_TIME	VARCHAR,
        DC1_ARM1_PF	VARCHAR,
        DC1_ARM1_COLLET_COUNT	VARCHAR,
        DC1_TEST_TIME	VARCHAR,
        DC1_TEST_PF	VARCHAR,
        DC1_TEST_STAGE_SERIAL	VARCHAR,
        DC1_TEST_STAGE_COUNT	VARCHAR,
        DC1_TEST_PROBE_SERIAL	VARCHAR,
        DC1_TEST_PROBE_COUNT	VARCHAR,
        DC1_TEST_PROBE_1_X	VARCHAR,
        DC1_TEST_PROBE_1_Y	VARCHAR,
        DC1_TEST_PROBE_2_X	VARCHAR,
        DC1_TEST_PROBE_2_Y	VARCHAR,
        DC1_TEST_ALIGN_X	VARCHAR,
        DC1_TEST_ALIGN_Y	VARCHAR,
        DC1_TEST_ALIGN_T	VARCHAR,
        DC1_ARM2_TIME	VARCHAR,
        DC1_ARM2_PF	VARCHAR,
        DC1_ARM2_COLLET_COUNT	VARCHAR,
        DC1_ALARM	VARCHAR,
        AC1_ARM1_TIME	VARCHAR,
        AC1_ARM1_PF	VARCHAR,
        AC1_ARM1_COLLET_COUNT	VARCHAR,
        AC1_TEST_TIME	VARCHAR,
        AC1_TEST_PF	VARCHAR,
        AC1_TEST_STAGE_SERIAL	VARCHAR,
        AC1_TEST_STAGE_COUNT	VARCHAR,
        AC1_TEST_PROBE_SERIAL	VARCHAR,
        AC1_TEST_PROBE_COUNT	VARCHAR,
        AC1_TEST_PROBE_1_X	VARCHAR,
        AC1_TEST_PROBE_1_Y	VARCHAR,
        AC1_TEST_PROBE_2_X	VARCHAR,
        AC1_TEST_PROBE_2_Y	VARCHAR,
        AC1_TEST_ALIGN_X	VARCHAR,
        AC1_TEST_ALIGN_Y	VARCHAR,
        AC1_TEST_ALIGN_T	VARCHAR,
        AC1_ARM2_TIME	VARCHAR,
        AC1_ARM2_PF	VARCHAR,
        AC1_ARM2_COLLET_COUNT	VARCHAR,
        AC1_ALARM	VARCHAR,
        AC2_ARM1_TIME	VARCHAR,
        AC2_ARM1_PF	VARCHAR,
        AC2_ARM1_COLLET_COUNT	VARCHAR,
        AC2_TEST_TIME	VARCHAR,
        AC2_TEST_PF	VARCHAR,
        AC2_TEST_STAGE_SERIAL	VARCHAR,
        AC2_TEST_STAGE_COUNT	VARCHAR,
        AC2_TEST_PROBE_SERIAL	VARCHAR,
        AC2_TEST_PROBE_COUNT	VARCHAR,
        AC2_TEST_PROBE_1_X	VARCHAR,
        AC2_TEST_PROBE_1_Y	VARCHAR,
        AC2_TEST_PROBE_2_X	VARCHAR,
        AC2_TEST_PROBE_2_Y	VARCHAR,
        AC2_TEST_ALIGN_X	VARCHAR,
        AC2_TEST_ALIGN_Y	VARCHAR,
        AC2_TEST_ALIGN_T	VARCHAR,
        AC2_ARM2_TIME	VARCHAR,
        AC2_ARM2_PF	VARCHAR,
        AC2_ARM2_COLLET_COUNT	VARCHAR,
        AC2_ALARM	VARCHAR,
        DC2_ARM1_TIME	VARCHAR,
        DC2_ARM1_PF	VARCHAR,
        DC2_ARM1_COLLET_COUNT	VARCHAR,
        DC2_TEST_TIME	VARCHAR,
        DC2_TEST_PF	VARCHAR,
        DC2_TEST_STAGE_SERIAL	VARCHAR,
        DC2_TEST_STAGE_COUNT	VARCHAR,
        DC2_TEST_PROBE_SERIAL	VARCHAR,
        DC2_TEST_PROBE_COUNT	VARCHAR,
        DC2_TEST_PROBE_1_X	VARCHAR,
        DC2_TEST_PROBE_1_Y	VARCHAR,
        DC2_TEST_PROBE_2_X	VARCHAR,
        DC2_TEST_PROBE_2_Y	VARCHAR,
        DC2_TEST_ALIGN_X	VARCHAR,
        DC2_TEST_ALIGN_Y	VARCHAR,
        DC2_TEST_ALIGN_T	VARCHAR,
        DC2_ARM2_TIME	VARCHAR,
        DC2_ARM2_PF	VARCHAR,
        DC2_ARM2_COLLET_COUNT	VARCHAR,
        DC2_ALARM	VARCHAR,
        IP_ARM1_TIME	VARCHAR,
        IP_ARM1_PF	VARCHAR,
        IP_ARM1_COLLET_COUNT	VARCHAR,
        IP_TEST_TIME	VARCHAR,
        IP_TEST_PF	VARCHAR,
        IP_TEST_STAGE_COUNT	VARCHAR,
        IP_ARM2_TIME	VARCHAR,
        IP_ARM2_PF	VARCHAR,
        IP_ARM2_COLLET_COUNT	VARCHAR,
        IP_ALARM	VARCHAR,
        ULD_PRE_TIME	VARCHAR,
        ULD_PRE_PF	VARCHAR,
        ULD_PRE_ALIGN_X	VARCHAR,
        ULD_PRE_ALIGN_Y	VARCHAR,
        ULD_PRE_ALIGN_T	VARCHAR,
        ULD_TRAY_POCKET_TIME	VARCHAR,
        ULD_TRAY_POCKET_PF	VARCHAR,
        ULD_TRAY_POCKET_X	VARCHAR,
        ULD_TRAY_POCKET_Y	VARCHAR,
        ULD_TRAY_POCKET_ALIGN_X	VARCHAR,
        ULD_TRAY_POCKET_ALIGN_Y	VARCHAR,
        ULD_ARM1_TIME	VARCHAR,
        ULD_ARM1_PF	VARCHAR,
        ULD_ARM1_COLLET_COUNT	VARCHAR,
        ULD_TRAY_CHIP_TIME	VARCHAR,
        ULD_TRAY_CHIP_ALIGN_X	VARCHAR,
        ULD_TRAY_CHIP_ALIGN_Y	VARCHAR,
        ULD_TRAY_CHIP_ALIGN_NUM	INTEGER,
        ULD_ALARM	VARCHAR,
        CONSTRAINT uix_lot_serial UNIQUE(LOT_NAME,SERIAL))",
        [],
    )
}
